# Copyright (c) 2015 SONATA-NFV and Paderborn University
# ALL RIGHTS RESERVED.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Neither the name of the SONATA-NFV [, ANY ADDITIONAL AFFILIATION]
# nor the names of its contributors may be used to endorse or promote
# products derived from this software without specific prior written
# permission.
#
# This work has been performed in the framework of the SONATA project,
# funded by the European Commission under Grant number 671517 through
# the Horizon 2020 and 5G-PPP programmes. The authors would like to
# acknowledge the contributions of their colleagues of the SONATA
# partner consortium (www.sonata-nfv.eu).

# -*- mode: ruby -*-
# vi: set ft=ruby :

#
# This Vagrant file create a son-emu VM.
#
#
# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.

Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.

  # We build on 14.04 
  config.vm.box = "ubuntu/trusty64"
  
  # SSH settings - generates error 
  # sonata user was added manually - user: sonata - passw: sonata
  #config.ssh.username = "vagrant"
  #config.ssh.password = "vagrant"
  #config.ssh.insert_key = "false"
  #config.ssh.forward_x11 = true

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 5000, host: 5000 # dummy gatekeeper
 

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "dhcp"
  config.vm.network "private_network", ip: "dhcp"
  config.vm.network "private_network", ip: "dhcp"


  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder ".", "/vagrant", disabled: true
  # config.vm.synced_folder ".", "/home/ubuntu/son-emu"

  # copy motd message file
  #config.vm.provision "file", source: "./motd_demo_sdk", destination: "/tmp/motd" 

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    vb.name = "mme1"
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
    vb.memory = "2048"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # provision files from host, for later use during install
  
  #config.vm.provision "file", source: "./config.yaml", destination: "/tmp/config.yaml"

  config.vm.hostname = "mme1"

  # change default password of the VM
  # due to a bug in the ubuntu xenial vagrant box, password for vagrant user is not known...
  # we add some new users ourselves 
  config.vm.provision "password", type: "shell", inline: <<-SHELL 
     apt-get install -y expect
     echo '#!/usr/bin/expect
      set timeout 20
      spawn sudo passwd ubuntu
      expect "Enter new UNIX password:" {send "ubuntu\\r"}
      expect "Retype new UNIX password:" {send "ubuntu\\r"}
      interact' > change_ubuntu_password
    chmod +x change_ubuntu_password
    ./change_ubuntu_password

    sudo adduser ubuntu sudo
  SHELL

  #config.vm.provision "add_user", type: "shell", inline: <<-SHELL 
  #   echo '#!/usr/bin/expect
  #    set timeout 20
  #    spawn sudo adduser sonata
  #    expect "Enter new UNIX password:" {send "sonata\\r"}
  #    expect "Retype new UNIX password:" {send "sonata\\r"}
  #    expect "Full Name []:" {send "\003"}
  #    interact' > change_sonata_password
  #  chmod +x change_sonata_password
  #  ./change_sonata_password
  #SHELL

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "git_pull", type: "shell", inline: <<-SHELL

     # add users to docker groupt to avoid sudo typing
     sudo gpasswd -a vagrant docker
     sudo gpasswd -a ubuntu docker
     #sudo gpasswd -a sonata docker
     
     cd /home/ubuntu
     git clone https://github.com/sonata-nfv/son-monitor-probe.git
     
     cd /home/ubuntu
     git clone https://github.com/stevenvanrossem/son-epc.git
     cd son-epc/SOFTNETWORKING_vEPC
     bash build_vepc_containers.sh
     
  SHELL

  config.vm.provision "docker" do |d|
    d.build_image "/home/ubuntu/son-monitor-probe" "-t son-vm-probe"
    d.run "son-vm-probe" 
    d.cmd "son-vm-probe"
    d.args "-e NODE_NAME=VNF_1 -e PROM_SRV=http://192.168.1.153:9091/metrics --net=host --privileged=true  -v /proc:/myhost/proc -v /:/rootfs:ro"
  end

  # start mme container
  #config.vm.provision "mme_file", source: "./Dockerfile.mme", destination: "/home/ubuntu/mme"
  config.vm.provision "docker" do |d|
    d.run "mme:v3" 
    d.cmd "son-vm-server -v -c /root/son-epc/configs/server.conf.mme"
    d.args "--net=host --privileged=true"
  end

end
  

end
